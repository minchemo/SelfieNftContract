{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MerkleProof.sol": "MerkleProof"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/MerkleProof.sol": {
			"keccak256": "0x6b46152b2978cda7cd50caecd1c2fe61745386413abf18a3fa6cd80f4be6f5ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb9b61c1916017b223596d702cfb3c6aeb19bc1645d06a9d87a6280345a903fb",
				"dweb:/ipfs/QmaiBV7vzA7bXQdSaPTYJb1v9ocKvKCBA11HKx3WYE3mEJ"
			]
		}
	},
	"version": 1
}